// Mocks generated by Mockito 5.3.2 from annotations
// in cryptocurrency/test/domain/usecases/get_coins_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:cryptocurrency/data/datasources/coin_remote_data_source.dart'
    as _i2;
import 'package:cryptocurrency/data/repositories/coin_repository_impl.dart'
    as _i4;
import 'package:cryptocurrency/domain/entities/coin_detail_entity.dart' as _i8;
import 'package:cryptocurrency/domain/entities/coin_entity.dart' as _i7;
import 'package:cryptocurrency/domain/failures/failures.dart' as _i6;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCoinRemoteDataSource_0 extends _i1.SmartFake
    implements _i2.CoinRemoteDataSource {
  _FakeCoinRemoteDataSource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CoinRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinRepositoryImpl extends _i1.Mock
    implements _i4.CoinRepositoryImpl {
  @override
  _i2.CoinRemoteDataSource get coinRemoteDataSource => (super.noSuchMethod(
        Invocation.getter(#coinRemoteDataSource),
        returnValue: _FakeCoinRemoteDataSource_0(
          this,
          Invocation.getter(#coinRemoteDataSource),
        ),
        returnValueForMissingStub: _FakeCoinRemoteDataSource_0(
          this,
          Invocation.getter(#coinRemoteDataSource),
        ),
      ) as _i2.CoinRemoteDataSource);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.CoinEntity>>> getCoins() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoins,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.CoinEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.CoinEntity>>(
          this,
          Invocation.method(
            #getCoins,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.CoinEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.CoinEntity>>(
          this,
          Invocation.method(
            #getCoins,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.CoinEntity>>>);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i8.CoinDetailEntity>>
      getCoinDetailFromDataSource({required String? coinId}) =>
          (super.noSuchMethod(
            Invocation.method(
              #getCoinDetailFromDataSource,
              [],
              {#coinId: coinId},
            ),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i8.CoinDetailEntity>>.value(
                    _FakeEither_1<_i6.Failure, _i8.CoinDetailEntity>(
              this,
              Invocation.method(
                #getCoinDetailFromDataSource,
                [],
                {#coinId: coinId},
              ),
            )),
            returnValueForMissingStub:
                _i5.Future<_i3.Either<_i6.Failure, _i8.CoinDetailEntity>>.value(
                    _FakeEither_1<_i6.Failure, _i8.CoinDetailEntity>(
              this,
              Invocation.method(
                #getCoinDetailFromDataSource,
                [],
                {#coinId: coinId},
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, _i8.CoinDetailEntity>>);
}
